name: AWS-Infrastructure-Pipeline

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      token:
        required: true
      account-id:
        required: true
      vpc:
        required: true
      subnet-a:
        required: true
      subnet-b:
        required: true
      subnet-c:
        required: true
      aws-region:
        required: true

env:
  ECR_REPOSITORY: "sample-repo"

jobs:
  package:
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ env.GITHUB_BRANCH }}
      short-sha: ${{ env.GITHUB_SHORT_SHA }}
      env-name: ${{ steps.env-name.outputs.environment }}

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2

      - name: Set Env Var - Short Sha
        run: echo "GITHUB_SHORT_SHA=$(echo $GITHUB_SHA | cut -c 1-8)" >> $GITHUB_ENV

      - name: Set Env Var - Branch
        if: github.base_ref != 'main'
        run: | 
          if [ ${{ github.event.number }} != "" ] 
          then
            echo "GITHUB_BRANCH=$(echo ${{ github.event.number }})" >> $GITHUB_ENV
          else
            echo "GITHUB_BRANCH=$(echo main)" >> $GITHUB_ENV
          fi
          echo "::set-output name=branch-name::${{ env.GITHUB_BRANCH }}"

      - name: Set Env Var - PR
        if: github.base_ref == 'main'
        run: |
          echo "GITHUB_BRANCH=$(echo ${{ github.event.number }})" >> $GITHUB_ENV
          echo "::set-output name=branch-name::${{ env.GITHUB_BRANCH }}"

      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "::set-output name=environment::$ENVIRONMENT"

      - name: Configure AWS credentials
        if: ${{ inputs.environment != 'integration' }}
        id: creds
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::${{ secrets.account-id }}:role/GitHubActionsRole
          aws-region: ${{ secrets.aws-region }}
          role-session-name: GitHubActions

      - name: Login to Amazon ECR
        if: ${{ inputs.environment != 'integration' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        if: ${{ inputs.environment != 'integration' }}
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: "${{ env.ECR_REPOSITORY }}"
          IMAGE_TAG: "${{ env.GITHUB_BRANCH }}-${{ env.GITHUB_SHORT_SHA }}"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - package
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::${{ secrets.account-id }}:role/GitHubActionsRole
          aws-region: ${{ secrets.aws-region }}
          role-session-name: GitHubActions

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image tag from ECR
        id: image-tag
        env:
          ECR_REGISTRY: ${{ secrets.account-id }}.dkr.ecr.eu-west-2.amazonaws.com
          ECR_REPOSITORY: "${{ env.ECR_REPOSITORY }}"
          IMAGE_TAG: "${{ needs.package.outputs.branch-name }}-${{ needs.package.outputs.short-sha }}"
        run: |
            echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy CloudFormation Stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: ${{ needs.package.outputs.env-name }}-${{ needs.package.outputs.branch-name }}-cluster
          capabilities: CAPABILITY_NAMED_IAM
          template: ./templates/ECS.yml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            VPC=${{ secrets.vpc }},
            SubnetA=${{ secrets.subnet-a }},
            SubnetB=${{ secrets.subnet-b }},
            SubnetC=${{ secrets.subnet-c }},
            Image=${{ steps.image-tag.outputs.image }},
            GitHubBranch=${{ needs.package.outputs.branch-name }}



